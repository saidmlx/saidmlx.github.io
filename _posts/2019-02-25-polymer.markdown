---
layout: post
title: Polymer
date: 2019-02-25 12:00:00 
categories: JavaScript Polymer
tags: JavaScript Polymer
---

__Tabla de contenido__

- [Librerias a importar](## Librerias a importar)
- [Estructura básica de un componente](## Estructura básica de un componente)
- [Data binding](## Data binding)

## Librerias a importar 
```javascript
<base href="https://cdn.rawgit.com/download/polymer-cdn/2.6.0/lib/">
<script src="webcomponentsjs/webcomponents-loader.js"></script>

<link rel="import" href="iron-ajax/iron-ajax.html">

<link rel="import" href="polymer/polymer-element.html">

```

## Estructura básica de un componente
Un componente de Polmer está constituido por tres partes

- __Template__: tag html que describe el la vista del componente.
- __Style__: apartado donde se escriben los estilos
- __Script__: definición del componente

```javascript
<dom-module id="polymer-element">
 <template>
   <style>
     :host h1{
       background-color: blue;
       color : white;
     }
     :host h1 span{
       color: cyan;
     }
   </style>
   <h1>The current month is <span>[[month]]</span> !!</h1>
 </template>
  <script>
   class PolymerElement extends Polymer.Element {
     static get is() { return "polymer-element"; }
     static get properties() {
       return {
         month: {
           type: String,
           value:'Janary'
         }
       };
     }
   }
   customElements.define(PolymerElement.is, PolymerElement);
 </script>
</dom-module>
```

## Data binding
Es la forma en que se vinculan los datos entre el javascript y el Template HTML y va en dos formas

### One-way data binding
Cuando queremos mostrar el valor de una propiedad dentro del HTML se hace un simple binding y esto de hace encerrando entre corchetes en nombre de la propiedad ```<span>[[month]]</span> ```

```javascript
<dom-module id="polymer-element">
 <template>
   <style>
     :host h1{
       background-color: blue;
       color : white;
     }
     :host h1 span{
       color: cyan;
     }
   </style>
   <h1>The current month is <span>[[month]]</span> !!</h1>
 </template>
 <script>
   class PolymerElement extends Polymer.Element {
     static get is() { return "polymer-element"; }
     static get properties() {
       return {
         month: {
           type: String,
           value:'Janary'
         }
       };
     }
   }
   customElements.define(PolymerElement.is, PolymerElement);
 </script>
</dom-module>
```

### Two-way data binding
Cuando necesitamos mostrar y tener la capacidad de modificar el valor de una propiedad dentro del HTML utilizamos el double binding que es encerrar entre llaves el nombre de la propiedad ``` {{month::input}} ``` .de esta forma lo que se escriba en el input afectará a la propiedad.

```javascript
<dom-module id="polymer-element">
 <template>
   <style>
     :host h2{
       background-color: blue;
       color : white;
     }
     :host h2 span{
       color: cyan;
     }
   </style>
   <h1>Two-way data binding</h1>
   <h2>The current month is <span>[[month]]</span> !!</h2>
   Change value <input type="text" value=" { { month::input } }  "></input>
 </template>
  <script>
   class PolymerElement extends Polymer.Element {
     static get is() { return "polymer-element"; }
     static get properties() {
       return {
         month: {
           type: String,
           value:'Janary'
         }
       };
     }
   }
   customElements.define(PolymerElement.is, PolymerElement);
 </script>

</dom-module>
```

### Data binding a un atributo
En ocasiones es necesario cambiar el valor de un atributo de un elemento HTML con el valor de una propiedad para eso el data binding se usa anteponiendo el signo __$__ antes del signo igual  ```<h2 class$="[[customColor]]">``` donde customColor es una propiedad del componente

```javascript
<dom-module id="polymer-element">
 <template>
   <style>
     :host h2{
       background-color: blue;
       color : white;
     }
     :host h2 span{
       color: cyan;
     }
     :host .orange{
       background-color: #FF9A06;
     }
   </style>
   <h1>Two-way data binding</h1>
   <h2 class$="[[customColor]]">The current month is <span>[[month]]</span> !!</h2>
   Change value <input type="text" value="{{month::input}}"></input>
 </template>
  <script>
   class PolymerElement extends Polymer.Element {
     static get is() { return "polymer-element"; }
     static get properties() {
       return {
         month: {
           type: String,
           value:'Janary'
         },
         customColor:{
           type: String,
           value: 'orange'
         }
       };
     }
   }
   customElements.define(PolymerElement.is, PolymerElement);
 </script>
</dom-module>

```


## Estructura dom-repeat
En ocasiones es necesario utilizar ciclos para generar elementos para eso es necesario utilizar la estructura dom-repeate.
En el ejemplo se muestra la forma de iterar un array que contiene los meses del año, para empezar se tiene una propiedad llamada months

```javascript
  months:{
           type: Array,
           value:[
             {month:1,season:'Winter',value:'January'},
             {month:2,season:'Winter',value:'February'},
             {month:3,season:'Spring',value:'March'},
             {month:4,season:'Spring',value:'April'},
             {month:5,season:'Spring',value:'May'},
             {month:6,season:'Summer',value:'June'},
             {month:7,season:'Summer',value:'July'},
             {month:8,season:'Summer',value:'August'},
             {month:9,season:'Fall',value:'September'},
             {month:10,season:'Fall',value:'October'},
             {month:11,season:'Fall',value:'November'},
             {month:12,season:'Winter',value:'December'}
           ]
         }
```

y en el template del componente generamos tantos botones como meses definidos

````javascript
<template is="dom-repeat" items="[[months]]">
  <div>
    <button>[[item.value]]</button>
  </div>
</template>

```
