I"W%<p>El <strong><em>patrón de diseño adapter</em></strong> es un de tipo interfaz y su implementación resuelve el problema de agregar una nueva implementación ha un código ya escrito.</p>

<p>El ejemplo más claro es cuando quiere cambiar un proveedor de servicios, imagina que tienes un contrato con la empresa X pero la empresa Y te da mejores beneficios, cambiar todo el desarrollo agregaría muchas horas de trabajo por lo cual generas una nueva interfaz y para heredar funcionalidad ya sea por clase o por objeto de la siguiente forma.</p>

<p>Tenemos la siguiente implementación que parecería normal en muchos lugares; una clase interfaz <strong>PayOne</strong> y su implementación en la clase <strong>PayOneImp</strong>.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PayOne</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodOne</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PayOneImp</span> <span class="kd">implements</span> <span class="nc">PayOne</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodOne</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"methodOne()"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunAdapterExample</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//-- First Implementation</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"First Implementation"</span><span class="o">);</span>
		<span class="nc">PayOne</span> <span class="n">payOne</span> <span class="o">=</span> <span class="k">new</span>  <span class="nc">PayOneImp</span><span class="o">();</span>
		<span class="n">payOne</span><span class="o">.</span><span class="na">methodOne</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="implementación-adapter">Implementación adapter</h2>

<p>La implementación del adapter puede ser por clase o por objeto</p>

<p>Para empezar hay que agregar una nueva interfaz <strong>PayTwo</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PayTwo</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodOne_</span><span class="o">();</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodTwo</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="implemetación-por-clase">Implemetación por clase</h3>

<p>En este tipo de implementación la clase <strong><em>hereda</em></strong> de <strong>PayOneImp</strong> e implementa la interfaz <strong>PayTwo</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PayTwoImpAdapterByClass</span> <span class="kd">extends</span> <span class="nc">PayOneImp</span> <span class="kd">implements</span> <span class="nc">PayTwo</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodTwo</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"methodTwo()"</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodOne_</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">methodOne</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunAdapterExample</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//-- Implementation Adapter By Class</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Adapter Implementation by class"</span><span class="o">);</span>
		<span class="nc">PayTwo</span> <span class="n">payTwoByClass</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PayTwoImpAdapterByClass</span><span class="o">();</span>
		<span class="n">payTwoByClass</span><span class="o">.</span><span class="na">methodOne_</span><span class="o">();</span>
		<span class="n">payTwoByClass</span><span class="o">.</span><span class="na">methodTwo</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="implementación-por-objeto">Implementación por objeto</h3>

<p>La implementación por objeto se <strong><em>instancia</em></strong> de la clase <strong>PayOneImp</strong> y se implementa de la interfaz <strong>PayTwo</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PayTwoImpAdapterByObject</span> <span class="kd">implements</span> <span class="nc">PayTwo</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">PayOne</span> <span class="n">payOne</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">PayTwoImpAdapterByObject</span><span class="o">(){</span>
		<span class="k">this</span><span class="o">.</span><span class="na">payOne</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PayOneImp</span><span class="o">();</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodOne_</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">payOne</span><span class="o">.</span><span class="na">methodOne</span><span class="o">();</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodTwo</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"methodTwo()"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunAdapterExample</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//-- Implementation By Object</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Adapter Implementation by object"</span><span class="o">);</span>
		<span class="nc">PayTwo</span> <span class="n">payTwoByObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PayTwoImpAdapterByObject</span><span class="o">();</span>
		<span class="n">payTwoByObject</span><span class="o">.</span><span class="na">methodOne_</span><span class="o">();</span>
		<span class="n">payTwoByObject</span><span class="o">.</span><span class="na">methodTwo</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Y de esta forma implementamos en dos formas el patrón Adapter</p>
:ET