I"|l<p><strong>Contenido</strong></p>
<ul>
  <li><a href="#Declaración-de-variables">Declaración de variables</a></li>
  <li><a href="#alcance-de-una-variable">Alcance de una variable</a></li>
  <li><a href="#estructuras-de-control">Estructuras de control</a></li>
  <li><a href="#plantillas-de-cadena-de-texto-Template-Literals">Plantillas de cadena de texto (Template Literals)</a></li>
  <li><a href="#json-javaScript-object-notation">JSON( JavaScript Object Notation.)</a></li>
  <li><a href="#el-objeto-this">El objeto this</a></li>
  <li><a href="#this-y-el-método-bind">This y el método bind</a></li>
  <li><a href="#objetos">Objetos</a></li>
  <li><a href="#Arrow-functions">Arrow functions</a></li>
  <li><a href="#arrays-solo-se-describen-los-más-importantes">Arrays (solo se describen los más importantes)</a></li>
  <li><a href="#asincronismo-callbacks-promesas-async-await">Asincronismo (callbacks, promesas, async-await)</a></li>
  <li><a href="#eventos">Eventos</a></li>
</ul>

<h2 id="declaración-de-variables">Declaración de variables</h2>

<p>Las formas de escribir variables son las siguientes.</p>

<h3 id="var">VAR</h3>
<p>Utilizado para declarar variables que pueden ser redeclaradas y que conservan su valor en el contexto donde fueron declaradas.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">bar</span><span class="dl">'</span>
</code></pre></div></div>

<h3 id="const">CONST</h3>

<p>Utilizado para declaraciones constantes no reasignables pero no entra dentro del concepto de inmutabilidad ya sea locales o globales de acuerdo al contexto donde fueron declaradas</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">foo</span><span class="o">=</span><span class="err">’’</span>
</code></pre></div></div>

<h3 id="let">LET</h3>

<p>Utilizado para declaraciones variables reasignables pero no redeclarable con alcance donde fueron declaradas</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">foo</span><span class="o">=</span><span class="err">’</span><span class="nx">bar</span><span class="err">’</span>
<span class="nx">Redeclaraci</span><span class="err">ó</span><span class="nx">n</span>
<span class="c1">//Redeclaration</span>
<span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="kd">const</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span>
<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">3</span>

<span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="dl">"</span><span class="s2">A</span><span class="dl">"</span> <span class="c1">//--  The statement is correct</span>
<span class="c1">//const b = "B" //-- SyntaxError: Identifier 'b' has already been declared</span>
<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">C</span><span class="dl">"</span>  <span class="c1">//-- SyntaxError: Identifier 'c' has already been declared</span>

<span class="nx">Redefinici</span><span class="err">ó</span><span class="nx">n</span>
<span class="c1">//Redeclaration</span>
<span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="kd">const</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span>
<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">3</span>

<span class="nx">a</span><span class="o">=</span><span class="dl">"</span><span class="s2">A</span><span class="dl">"</span> <span class="c1">//--  The statement is correct</span>
<span class="c1">//b = "B" //-- TypeError: Assignment to constant variable.</span>
<span class="nx">c</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">C</span><span class="dl">"</span>  <span class="c1">//--  The statement is correct</span>
</code></pre></div></div>

<h2 id="alcance-de-una-variable">Alcance de una variable</h2>

<p><strong>Ejemplo 1</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="kd">const</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span>
<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">3</span>

<span class="kd">function</span> <span class="nx">demo</span><span class="p">(){</span>
 <span class="nx">a</span><span class="o">++</span><span class="p">;</span>
 <span class="c1">//b++; //--TypeError: Assignment to constant variable.</span>
 <span class="nx">c</span><span class="o">++</span><span class="p">;</span>
 <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">a: </span><span class="dl">'</span><span class="o">+</span><span class="nx">a</span><span class="p">)</span> <span class="c1">//-- print: a: 2</span>
 <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">b: </span><span class="dl">'</span><span class="o">+</span><span class="nx">b</span><span class="p">)</span> <span class="c1">//-- print: a: 2</span>
 <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">c: </span><span class="dl">'</span><span class="o">+</span><span class="nx">c</span><span class="p">)</span> <span class="c1">//-- print: a: 4</span>
<span class="p">}</span>
<span class="nx">demo</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">a: </span><span class="dl">'</span><span class="o">+</span><span class="nx">a</span><span class="p">)</span><span class="c1">//-- print: a: 2</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">b: </span><span class="dl">'</span><span class="o">+</span><span class="nx">b</span><span class="p">)</span><span class="c1">//-- print: a: 2</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">c: </span><span class="dl">'</span><span class="o">+</span><span class="nx">c</span><span class="p">)</span><span class="c1">//-- print: a: 4</span>
</code></pre></div></div>

<p><strong>Ejemplo 2</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="kd">const</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span>
<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">3</span>

<span class="kd">function</span> <span class="nx">demo</span><span class="p">(){</span>
 <span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="dl">'</span><span class="s1">A</span><span class="dl">'</span>
 <span class="kd">const</span> <span class="nx">b</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">B</span><span class="dl">"</span>
 <span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">C</span><span class="dl">"</span>
 <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">a: </span><span class="dl">'</span><span class="o">+</span><span class="nx">a</span><span class="p">)</span> <span class="c1">//-- print: a: A</span>
 <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">b: </span><span class="dl">'</span><span class="o">+</span><span class="nx">b</span><span class="p">)</span> <span class="c1">//-- print: a: B</span>
 <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">c: </span><span class="dl">'</span><span class="o">+</span><span class="nx">c</span><span class="p">)</span> <span class="c1">//-- print: a: C</span>
<span class="p">}</span>
<span class="nx">demo</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">a: </span><span class="dl">'</span><span class="o">+</span><span class="nx">a</span><span class="p">)</span><span class="c1">//-- print: a: 1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">b: </span><span class="dl">'</span><span class="o">+</span><span class="nx">b</span><span class="p">)</span><span class="c1">//-- print: a: 2</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">c: </span><span class="dl">'</span><span class="o">+</span><span class="nx">c</span><span class="p">)</span><span class="c1">//-- print: a: 3</span>
</code></pre></div></div>

<h2 id="estructuras-de-control">Estructuras de control</h2>

<p>Las estructuras de control son similares a otros lenguajes.</p>

<h3 id="if">IF</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="kc">true</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>
   <span class="c1">//TODO</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
   <span class="c1">//TODO</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="for">FOR</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;=</span><span class="mi">10</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
<span class="c1">//TODO</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="foreach">FOREACH</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">months</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">January</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">February</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">March</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">April</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">May</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">June</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">July</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">August</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">September</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">October</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">November</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">December</span><span class="dl">'</span><span class="p">]</span>

<span class="nx">months</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">){</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s2">`Tu estas en el indice </span><span class="p">${</span><span class="nx">index</span><span class="p">}</span><span class="s2"> mes </span><span class="p">${</span><span class="nx">item</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
<span class="p">})</span>
<span class="c1">//--with arrow function</span>
<span class="nx">months</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span><span class="o">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s2">`Tu estas en el indice </span><span class="p">${</span><span class="nx">index</span><span class="p">}</span><span class="s2"> mes </span><span class="p">${</span><span class="nx">item</span><span class="p">}</span><span class="s2">`</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="switch">SWITCH</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">month</span><span class="o">=</span><span class="dl">'</span><span class="s1">March</span><span class="dl">'</span>
<span class="k">switch</span><span class="p">(</span><span class="nx">month</span><span class="p">){</span>
   <span class="k">case</span> <span class="dl">"</span><span class="s2">January</span><span class="dl">"</span><span class="p">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">Is winter</span><span class="dl">'</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
   <span class="k">case</span> <span class="dl">"</span><span class="s2">February</span><span class="dl">"</span><span class="p">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">Is winter</span><span class="dl">'</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
   <span class="k">case</span> <span class="dl">"</span><span class="s2">March</span><span class="dl">"</span><span class="p">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">Is Spring</span><span class="dl">'</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
   <span class="k">case</span> <span class="dl">"</span><span class="s2">April</span><span class="dl">"</span><span class="p">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">Is Spring</span><span class="dl">'</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
   <span class="k">case</span> <span class="dl">"</span><span class="s2">May</span><span class="dl">"</span><span class="p">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">Is Spring</span><span class="dl">'</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
   <span class="k">case</span> <span class="dl">"</span><span class="s2">June</span><span class="dl">"</span><span class="p">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">Is Summer</span><span class="dl">'</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
   <span class="k">case</span> <span class="dl">"</span><span class="s2">July</span><span class="dl">"</span><span class="p">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">Is Summer</span><span class="dl">'</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
   <span class="k">case</span> <span class="dl">"</span><span class="s2">August</span><span class="dl">"</span><span class="p">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">Is Summer</span><span class="dl">'</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
   <span class="k">case</span> <span class="dl">"</span><span class="s2">September</span><span class="dl">"</span><span class="p">:</span><span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">Is Fall</span><span class="dl">'</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
   <span class="k">case</span> <span class="dl">"</span><span class="s2">October</span><span class="dl">"</span><span class="p">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">Is Fall</span><span class="dl">'</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
   <span class="k">case</span> <span class="dl">"</span><span class="s2">November</span><span class="dl">"</span><span class="p">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">Is Fall</span><span class="dl">'</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
   <span class="k">case</span> <span class="dl">"</span><span class="s2">December</span><span class="dl">"</span><span class="p">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">Is winter</span><span class="dl">'</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
   <span class="nl">default</span><span class="p">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s2">`Error`</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="plantillas-de-cadena-de-texto-template-literals">Plantillas de cadena de texto (Template Literals)</h2>

<p>Plantillas de cadena de texto o Template Literals es una características que nos permite en una cadena de texto insertar expresiones, olvidándonos así de la concatenación con el signo +.
Para hacer un Template Literal en necesario que estén en comillas tipo ` content `
 y las expresiones deben estar dentro de <code class="highlighter-rouge">${number}</code></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">number</span><span class="o">=</span><span class="mi">25</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="s2">`My lucky number is </span><span class="p">${</span><span class="nx">number</span><span class="p">}</span><span class="s2"> `</span><span class="p">)</span>
<span class="c1">//-- "My lucky number is 25 "</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="s2">`If multiply my lucky number </span><span class="p">${</span><span class="nx">number</span><span class="o">*</span><span class="mi">2</span><span class="p">}</span><span class="s2"> `</span><span class="p">)</span>
<span class="c1">//-- "If multiply my lucky number 50 "</span>
</code></pre></div></div>

<h2 id="json-javascript-object-notation">JSON( JavaScript Object Notation.)</h2>

<p>Es un formato de texto para intercambio de datos muy utilizado en JavaScript que funciona como un reemplazo a XML gracias a su gran facilidad de manejo; y un gran número de APIs en los diferentes lenguajes para poderlos manejar.
Tipos de datos que acepta</p>
<ul>
  <li>String</li>
  <li>Number</li>
  <li>Object (JSON object)</li>
  <li>Array</li>
  <li>Boolean</li>
  <li>null</li>
</ul>

<h3 id="estructuras-permitidas">Estructuras permitidas</h3>
<p>Los json se escriben en dos estructuras
Nombre Valor</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
   <span class="nl">var1</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
   <span class="nx">var2</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span>
   <span class="nx">var3</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span>
   <span class="nx">var4</span><span class="p">:{}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="lista-de-valores">Lista de valores</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
   <span class="nl">var_a</span><span class="p">:[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">],</span>
   <span class="nx">var_b</span><span class="p">:[{},{},{}]</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="convertir-json-a-string">Convertir JSON a String</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
   <span class="na">var1</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
   <span class="na">var2</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span>
   <span class="na">var3</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span>
   <span class="na">var4</span><span class="p">:{}</span>
<span class="p">})</span>

<span class="c1">//&gt;"{"var1":1,"var2":true,"var3":null,"var4":{}}"</span>
</code></pre></div></div>

<h3 id="convirtiendo-texto-a-json">Convirtiendo texto a JSON</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s2">`{"var1":1,"var2":true,"var3":null,"var4":{}}`</span><span class="p">)</span>
<span class="c1">//&gt;</span>
<span class="p">{</span>
   <span class="nl">var1</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
   <span class="nx">var2</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span>
   <span class="nx">var3</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span>
   <span class="nx">var4</span><span class="p">:{}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="cómo-acceder-a-los-valores-de-un-json">Cómo acceder a los valores de un json</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">luke</span> <span class="o">=</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Luke Skywalker</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">height</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">172</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">mass</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">77</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">films</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
       <span class="p">{</span>
           <span class="dl">"</span><span class="s2">title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">The Empire Strikes Back</span><span class="dl">"</span><span class="p">,</span>
           <span class="dl">"</span><span class="s2">episode_id</span><span class="dl">"</span><span class="p">:</span> <span class="mi">5</span>
       <span class="p">},</span>
       <span class="p">{</span>
           <span class="dl">"</span><span class="s2">title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Revenge of the Sith</span><span class="dl">"</span><span class="p">,</span>
           <span class="dl">"</span><span class="s2">episode_id</span><span class="dl">"</span><span class="p">:</span> <span class="mi">3</span>
       <span class="p">}</span>
    <span class="p">]</span>
<span class="p">}</span>
<span class="nx">luke</span><span class="p">.</span><span class="nx">name</span>
<span class="c1">//"Luke Skywalker"</span>
<span class="nx">luke</span><span class="p">.</span><span class="nx">films</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">title</span>
<span class="c1">//"Revenge of the Sith"</span>
</code></pre></div></div>

<h2 id="el-objeto-this">El objeto this</h2>
<p>El this es el objeto para referirnos al contexto donde estamos pero en algunos casos es necesario; saber administrarlo ya que cambia su contexto ya estemos en un evento, dentro de un foreach.
Por ejemplo en el siguiente ejemplo:
en método <code class="highlighter-rouge">demo.print()</code> imprime el objeto Demo, pero el método <code class="highlighter-rouge">demo.actionForEach()</code> hace referencia al objeto Window</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Demo</span><span class="p">{</span>
   <span class="kd">constructor</span><span class="p">(){</span>
     <span class="k">this</span><span class="p">.</span><span class="nx">months</span><span class="o">=</span><span class="p">[</span><span class="dl">'</span><span class="s1">January</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">February</span><span class="dl">'</span><span class="p">]</span>
   <span class="p">}</span>
   <span class="nx">actionForEach</span><span class="p">(){</span>
     <span class="k">this</span><span class="p">.</span><span class="nx">months</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">){</span>
       <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
     <span class="p">})</span>
   <span class="p">}</span>
   <span class="nx">print</span><span class="p">(){</span>
     <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
   <span class="p">}</span>
 <span class="p">}</span>
<span class="kd">let</span> <span class="nx">demo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Demo</span><span class="p">();</span>
<span class="nx">demo</span><span class="p">.</span><span class="nx">print</span><span class="p">()</span>
<span class="nx">demo</span><span class="p">.</span><span class="nx">actionForEach</span><span class="p">()</span>
</code></pre></div></div>

<p>Para solucionar lo anterior debemos hacer referencia al this de la siguiente forma, para poder acceder a las propiedades y métodos de la clase Demo</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Demo</span><span class="p">{</span>
   <span class="kd">constructor</span><span class="p">(){</span>
     <span class="k">this</span><span class="p">.</span><span class="nx">months</span><span class="o">=</span><span class="p">[</span><span class="dl">'</span><span class="s1">January</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">February</span><span class="dl">'</span><span class="p">]</span>
   <span class="p">}</span>
   <span class="nx">actionForEach</span><span class="p">(){</span>
     <span class="k">this</span><span class="p">.</span><span class="nx">months</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">){</span>
       <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
     <span class="p">},</span><span class="k">this</span><span class="p">)</span>
   <span class="p">}</span>
   <span class="nx">print</span><span class="p">(){</span>
     <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
   <span class="p">}</span>
 <span class="p">}</span>
<span class="kd">let</span> <span class="nx">demo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Demo</span><span class="p">();</span>
<span class="nx">demo</span><span class="p">.</span><span class="nx">print</span><span class="p">()</span>
<span class="nx">demo</span><span class="p">.</span><span class="nx">actionForEach</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="this-y-el-método-bind">This y el método bind</h2>

<p>Otro momento que analizar es cuando trabajamos con eventos, en este script se crea un Objeto Button y se le agrega un evento click y se le asigna el método <code class="highlighter-rouge">nextMonth()</code> para que incremente el valor de la  variable <code class="highlighter-rouge">currentMonth</code> en 1, pero en la línea <code class="highlighter-rouge">this.currentMonth++;</code> no puede acceder al objeto base porque este obedece al objeto que generó el evento en este caso el Button, por lo tanto el <code class="highlighter-rouge">currentMonth</code> siempre será <code class="highlighter-rouge">January</code>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Demo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>    
<span class="k">this</span><span class="p">.</span><span class="nx">months</span><span class="o">=</span><span class="p">[</span><span class="dl">'</span><span class="s1">January</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">February</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">March</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">April</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">May</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">June</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">July</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">August</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">September</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">October</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">November</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">December</span><span class="dl">'</span><span class="p">]</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">currentMonth</span><span class="o">=</span><span class="mi">0</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">btnNext</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">)</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">btnNext</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">nextMonth</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">Demo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">nextMonth</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">currentMonth</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">Demo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">printCurrentMonth</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">months</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">currentMonth</span><span class="p">])</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">demo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Demo</span><span class="p">();</span>
<span class="nx">demo</span><span class="p">.</span><span class="nx">printCurrentMonth</span><span class="p">();</span> <span class="c1">//--print January</span>
<span class="nx">demo</span><span class="p">.</span><span class="nx">btnNext</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="k">new</span> <span class="nx">Event</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">));</span>
<span class="nx">demo</span><span class="p">.</span><span class="nx">printCurrentMonth</span><span class="p">();</span> <span class="c1">//--print January</span>
<span class="nx">demo</span><span class="p">.</span><span class="nx">btnNext</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="k">new</span> <span class="nx">Event</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">));</span>
<span class="nx">demo</span><span class="p">.</span><span class="nx">printCurrentMonth</span><span class="p">();</span> <span class="c1">//--print January</span>
</code></pre></div></div>

<p><em>If you copy and paste the script into Chrome Browser you will see the result</em></p>

<p>Para eso es necesario utilizar el método bind que lo que hace es enviar el this al método del evento para poder uso de sus propiedades de la forma <code class="highlighter-rouge">this.nextMonth.bind(this).</code></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Demo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">months</span><span class="o">=</span><span class="p">[</span><span class="dl">'</span><span class="s1">January</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">February</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">March</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">April</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">May</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">June</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">July</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">August</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">September</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">October</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">November</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">December</span><span class="dl">'</span><span class="p">]</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">currentMonth</span><span class="o">=</span><span class="mi">0</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">btnNext</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">)</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">btnNext</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">nextMonth</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
 <span class="p">}</span>
 <span class="nx">Demo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">nextMonth</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">currentMonth</span><span class="o">++</span><span class="p">;</span>
 <span class="p">}</span>
 <span class="nx">Demo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">printCurrentMonth</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">months</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">currentMonth</span><span class="p">])</span>
 <span class="p">}</span>
 <span class="kd">const</span> <span class="nx">demo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Demo</span><span class="p">();</span>
 <span class="nx">demo</span><span class="p">.</span><span class="nx">printCurrentMonth</span><span class="p">();</span> <span class="c1">//--print January</span>
 <span class="nx">demo</span><span class="p">.</span><span class="nx">btnNext</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="k">new</span> <span class="nx">Event</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">));</span>
 <span class="nx">demo</span><span class="p">.</span><span class="nx">printCurrentMonth</span><span class="p">();</span> <span class="c1">//--print February</span>
 <span class="nx">demo</span><span class="p">.</span><span class="nx">btnNext</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="k">new</span> <span class="nx">Event</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">));</span>
 <span class="nx">demo</span><span class="p">.</span><span class="nx">printCurrentMonth</span><span class="p">();</span> <span class="c1">//--print March</span>
</code></pre></div></div>

<h2 id="objetos">Objetos</h2>

<p>Las tres formas de escribir Clases</p>

<h3 id="prototype">Prototype</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">Dog</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Dog:Constructor()</span><span class="dl">'</span><span class="p">)</span>
 <span class="p">}</span>
 <span class="nx">Dog</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">talk</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
     <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">auuuuuu</span><span class="dl">'</span><span class="p">);</span>
 <span class="p">}</span>
 <span class="kd">var</span> <span class="nx">dog</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dog</span><span class="p">();</span>
 <span class="nx">dog</span><span class="p">.</span><span class="nx">talk</span><span class="p">();</span>
 <span class="c1">//--auuuuuu</span>
</code></pre></div></div>

<h3 id="object">Object</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Dog</span> <span class="o">=</span> <span class="p">{</span>
   <span class="na">init</span><span class="p">:</span><span class="kd">function</span> <span class="nx">init</span><span class="p">(){</span>
     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Dog:Constructor()</span><span class="dl">'</span><span class="p">);</span>
   <span class="p">},</span>
   <span class="na">talk</span> <span class="p">:</span> <span class="kd">function</span> <span class="nx">talk</span><span class="p">(){</span>
     <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">auuuuuu</span><span class="dl">'</span><span class="p">);</span>
   <span class="p">}</span>
 <span class="p">}</span>
 <span class="kd">const</span> <span class="nx">dog</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Dog</span><span class="p">);</span>
 <span class="nx">dog</span><span class="p">.</span><span class="nx">talk</span><span class="p">();</span>
 <span class="c1">//--"auuuuuu"</span>
</code></pre></div></div>

<h3 id="class">Class</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Dog</span>  <span class="p">{</span>
   <span class="kd">constructor</span><span class="p">(){</span>
    
   <span class="p">}</span>
   <span class="nx">talk</span><span class="p">(){</span>
     <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">auuuuuu</span><span class="dl">'</span><span class="p">);</span>
   <span class="p">}</span>
 <span class="p">}</span>
 <span class="kd">const</span> <span class="nx">dog</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dog</span><span class="p">();</span>
 <span class="nx">dog</span><span class="p">.</span><span class="nx">talk</span><span class="p">();</span>
 <span class="c1">//--"auuuuuu"</span>
</code></pre></div></div>

<h2 id="arrow-functions">Arrow functions</h2>

<p>Las arrow functions son una forma más reducida de escribir funciones, esta es una forma de escribir funciones anónimas además que provee una particularidad de desvincular el this.<br />
La siguiente función calcula el área de un círculo y veras la forma de cómo los Array Functions te ayudan a reducir el código.
<strong>Versión 1</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">radio</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">areaCircle</span> <span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">radio</span><span class="p">){</span>
   <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span>  <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="nx">radio</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">area</span><span class="o">=</span><span class="nx">areaCircle</span><span class="p">(</span><span class="nx">radio</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">El area de un circulo con radio </span><span class="dl">'</span><span class="o">+</span><span class="nx">radio</span><span class="o">+</span><span class="dl">'</span><span class="s1"> es: </span><span class="dl">'</span><span class="o">+</span> <span class="nx">area</span><span class="p">);</span><span class="c1">//--El area de un circulo con radio 2 es: 12.566370614359172</span>
</code></pre></div></div>

<p>__Versión 2: con reducción de codigo gracias __</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">radio</span> <span class="o">=</span> <span class="mi">2</span>
<span class="kd">const</span> <span class="nx">areaCircle</span> <span class="o">=</span> <span class="p">(</span><span class="nx">radio</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span>  <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="nx">radio</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`El area de un circulo con radio </span><span class="p">${</span><span class="nx">radio</span><span class="p">}</span><span class="s2"> es: </span><span class="p">${</span><span class="nx">areaCircle</span><span class="p">(</span><span class="nx">radio</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span><span class="c1">//--El area de un circulo con radio 2 es: 12.566370614359172</span>
</code></pre></div></div>

<p>Pero qué pasa con el concepto de desvincular el this.
Cantes cuando se utilizaba un foreach y se quería acceder al this del objeto que lo contenía era necesario reasignar el this o pasarlo como parámetro de esta forma</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Sum</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">numbers</span> <span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">];</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">total</span><span class="o">=</span><span class="mi">0</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">sumElements</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
     <span class="k">this</span><span class="p">.</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">){</span>
       <span class="k">this</span><span class="p">.</span><span class="nx">total</span><span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">total</span><span class="o">+</span><span class="nx">item</span><span class="p">;</span><span class="c1">//en este punto this corresponde al objeto Window</span>
     <span class="p">});</span>
   <span class="p">}</span>
 <span class="p">}</span>
 <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Sum</span><span class="p">();</span>
 <span class="nx">sum</span><span class="p">.</span><span class="nx">sumElements</span><span class="p">();</span>
 <span class="nx">sum</span><span class="p">.</span><span class="nx">total</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Sum</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">numbers</span> <span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">];</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">total</span><span class="o">=</span><span class="mi">0</span>
   <span class="kd">let</span> <span class="nb">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">sumElements</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
     <span class="k">this</span><span class="p">.</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">){</span>
       <span class="nb">self</span><span class="p">.</span><span class="nx">total</span><span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="nx">total</span><span class="o">+</span><span class="nx">item</span><span class="p">;</span>
    <span class="p">})</span>
   <span class="p">}</span>
 <span class="p">}</span>
 <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Sum</span><span class="p">();</span>
 <span class="nx">sum</span><span class="p">.</span><span class="nx">sumElements</span><span class="p">();</span>
 <span class="nx">sum</span><span class="p">.</span><span class="nx">total</span>
</code></pre></div></div>

<p>Ahora si utilizamos Array Functions no tenemos que asignar a otra variable el objeto this</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Sum</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">numbers</span> <span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">];</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">total</span><span class="o">=</span><span class="mi">0</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">sumElements</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
     <span class="k">this</span><span class="p">.</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">total</span><span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">total</span><span class="o">+</span><span class="nx">item</span><span class="p">;});</span>
   <span class="p">}</span>
 <span class="p">}</span>
 <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Sum</span><span class="p">();</span>
 <span class="nx">sum</span><span class="p">.</span><span class="nx">sumElements</span><span class="p">();</span>
 <span class="nx">sum</span><span class="p">.</span><span class="nx">total</span>
</code></pre></div></div>

<h2 id="arrays-solo-se-describen-los-más-importantes">Arrays (solo se describen los más importantes)</h2>
<p><strong>filter()</strong> : regresa todos los elementos que cumplan con el filtro aplicado</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">days</span><span class="o">=</span><span class="p">[</span><span class="dl">'</span><span class="s1">Monday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Monday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Tuesday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Wednesday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Thursday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Friday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Saturday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Sunday</span><span class="dl">'</span><span class="p">]</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="nx">days</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">6</span><span class="p">))</span>
<span class="c1">//-- ["Tuesday", "Wednesday", "Thursday", "Saturday"]</span>
</code></pre></div></div>

<p><strong>map()</strong>:  regresa un nuevo arreglo con las operaciones aplicadas a cada elemento</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">days</span><span class="o">=</span><span class="p">[</span><span class="dl">'</span><span class="s1">Monday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Monday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Tuesday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Wednesday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Thursday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Friday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Saturday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Sunday</span><span class="dl">'</span><span class="p">]</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="nx">days</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">())</span> <span class="p">)</span>
<span class="c1">//--  ["MONDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]</span>
</code></pre></div></div>

<p><strong>push()</strong>: agrega un nuevo elemento al array</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">days</span><span class="o">=</span><span class="p">[</span><span class="dl">'</span><span class="s1">Monday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Monday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Tuesday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Wednesday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Thursday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Friday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Saturday</span><span class="dl">'</span><span class="p">]</span>
<span class="nx">days</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">Sunday</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="nx">days</span><span class="p">)</span>
<span class="c1">//--["Monday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]</span>
</code></pre></div></div>

<p><strong>pop()</strong>: elimina el último elemento</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">days</span><span class="o">=</span><span class="p">[</span><span class="dl">'</span><span class="s1">Monday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Tuesday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Wednesday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Thursday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Friday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Saturday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Sunday</span><span class="dl">'</span><span class="p">]</span>
<span class="nx">days</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="nx">days</span><span class="p">)</span>
<span class="c1">//--["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]</span>
</code></pre></div></div>

<p><strong>shift()</strong>: elimina el primer elemento de un array</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">days</span><span class="o">=</span><span class="p">[</span><span class="dl">'</span><span class="s1">Monday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Tuesday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Wednesday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Thursday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Friday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Saturday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Sunday</span><span class="dl">'</span><span class="p">]</span>
<span class="kd">var</span> <span class="nx">day</span> <span class="o">=</span> <span class="nx">days</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="nx">days</span><span class="p">)</span>
<span class="c1">//--["Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="nx">day</span><span class="p">)</span>
<span class="c1">//--"Monday"</span>
</code></pre></div></div>

<p><strong>slice</strong>:([posición inicial], [posición final]): hace una copia de los elementos seleccionados y el array principal queda intacto
let days=[‘Monday’,’Tuesday’,’Wednesday’,’Thursday’,’Friday’,’Saturday’,’Sunday’]</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">day</span> <span class="o">=</span> <span class="nx">days</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="nx">days</span><span class="p">);</span>
<span class="c1">//--["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="nx">day</span><span class="p">);</span>
<span class="c1">//--["Wednesday", "Thursday"]</span>
</code></pre></div></div>

<p><strong>splice</strong>([posición inicial], [número de elementos a extraer]): extrae elementos seleccionados del array principal.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">days</span><span class="o">=</span><span class="p">[</span><span class="dl">'</span><span class="s1">Monday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Tuesday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Wednesday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Thursday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Friday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Saturday</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Sunday</span><span class="dl">'</span><span class="p">]</span>

<span class="kd">var</span> <span class="nx">day</span> <span class="o">=</span> <span class="nx">days</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="nx">days</span><span class="p">);</span>
<span class="c1">//-- ["Monday", "Tuesday", "Friday", "Saturday", "Sunday"]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="nx">day</span><span class="p">);</span>
<span class="c1">//-- ["Wednesday", "Thursday"]</span>
</code></pre></div></div>

<p><strong>reduce()</strong>: El método reduce hace la funcion de acululador teniendo en cada ciclo el valor anterior con el valor nuevo.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">numbers</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">]</span>

<span class="kd">const</span> <span class="nx">total</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span>
<span class="c1">//--[1, 2, 3, 4, 5, 6, 7, 8]</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s2">`total: </span><span class="p">${</span><span class="nx">total</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
<span class="c1">//--"total: 36"</span>
</code></pre></div></div>
<h2 id="asincronismo-callbacks-promesas-async-await">Asincronismo (callbacks, promesas, async-await)</h2>
<p>En algunas ocasiones necesitamos llamar peticiones HTTP, y sabemos que para que la experiencia de usuario no sea desfavorable estas peticiones deben ser asíncronas, pero qué pasa si estas peticiones dependen una de otra, lo que significa anidar estas peticiones; para este caso necesitamos promesas.
Una promesa no es más que una respuesta que puede o no estar disponible; esto significa que si lanzamos una petición la respuesta puede ser devuelta al instante o tardar 1,2,3,… minutos o no responder nunca.
Para los ejemplos posteriores estaremos utilizando  la API REST JSON PLACEHOLDER</p>

<h3 id="jquery-callbacks">jQuery Callbacks</h3>
<p>Si analizamos el método ajax <code class="highlighter-rouge">ajaxCallback()</code> podemos ver que existe la línea <code class="highlighter-rouge">var deferred = $.Deferred();</code> el método <code class="highlighter-rouge">$.Deferred()</code> es el que nos ayuda a generar una cola de llamadas y retransmite una petición resuelta o una petición rechazada como lo podemos ver en las líneas  <code class="highlighter-rouge">deferred.resolve(data );  deferred.reject(data);</code>.
Al analizar la llamada  <code class="highlighter-rouge">ajaxCallback().then(resolvedAnswer, rejectedAnwer)</code> podremos ver que llama al método then que es un manejador para ser llamado cuando un Objeto Deferred es resuelto o rechazado, este está aceptando dos funciones la primera es para cuando hay una petición <code class="highlighter-rouge">resuelta(resolvedAnswer)</code> y la segunda cuando hay una petición <code class="highlighter-rouge">rechazada(rejectedAnwer)</code>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">ajaxCallback</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span> <span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">url</span><span class="p">:</span> <span class="dl">'</span><span class="s1">https://jsonplaceholder.typicode.com/users/1</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">dataType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">success</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span><span class="nx">textStatus</span><span class="p">,</span><span class="nx">jqXHR</span> <span class="p">){</span>
      <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span> <span class="p">);</span>
    <span class="p">},</span>
    <span class="na">fail</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span><span class="nx">textStatus</span><span class="p">,</span><span class="nx">jqXHR</span><span class="p">){</span> 
      <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="na">error</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span><span class="nx">textStatus</span><span class="p">,</span><span class="nx">jqXHR</span><span class="p">){</span>
      <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>
  <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">();</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">resolvedAnswer</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="dl">'</span><span class="s1">--resolvedAnswer--</span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">rejectedAnwer</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="dl">'</span><span class="s1">--rejectedAnwer--</span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
<span class="p">}</span>
 
<span class="nx">ajaxCallback</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">resolvedAnswer</span><span class="p">,</span> <span class="nx">rejectedAnwer</span><span class="p">)</span>

</code></pre></div></div>

<p><strong>Resolved Answer</strong></p>
<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">
"--resolvedAnswer--"

Object {
 address: Object {
   city: "Gwenborough",
   geo: Object {},
   street: "Kulas Light",
   suite: "Apt. 556",
   zipcode: "92998-3874"
 },
 company: Object {
   bs: "harness real-time e-markets",
   catchPhrase: "Multi-layered client-server neural-net",
   name: "Romaguera-Crona"
 },
 email: "Sincere@april.biz",
 id: 1,
 name: "Leanne Graham",
 phone: "1-770-736-8031 x56442",
 username: "Bret",
 website: "hildegard.org"
}
</span></code></pre></div></div>
<p><strong>Rejected Answer</strong></p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">"--rejectedAnwer--"
Object{
</span><span class="c">  ...
</span><span class="go">  readyState: 4,
  responseJSON: Object{},
  responsetext:"{}"
  status:404,
  statusText:'error',
</span><span class="c">  ...
</span><span class="go">}

</span></code></pre></div></div>

<h3 id="promise-callbacks">Promise Callbacks</h3>

<p>Si no queremos utilizar jQuery la opción es utilizar el Objeto Promise que funciona masomenos como un proxy para encontrar un valor no disponible en el momento pero puede o no estar en el futuro.
Tenemos el mismo ejemplo anterior, si analizamos <code class="highlighter-rouge">promiseCallback</code>  veremos que regresa una promesa(return new <code class="highlighter-rouge">Promise(function(resolve, reject) )</code> y mediante el objeto <code class="highlighter-rouge">XMLHttpRequest()</code> hace una petición asíncrona para obtener un usuario y una vez responda se valida que tipo de status regresa si es un <strong>200</strong> entonces la promesa envía un resolver (<code class="highlighter-rouge">resolve( req.response );</code>) y en caso contrario un reject <code class="highlighter-rouge">reject( Error(req.statusText));</code>.
Para hacer la petición se hace de la siguiente forma  <code class="highlighter-rouge">promiseCallback().then( resolvedAnswer, rejectedAnwer)</code> y si observamos se utiliza también el then con los mismos parámetros el primero para una ejecución exitosa () y la segunda en caso de que exista algún error.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">promiseCallback</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
   <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
     <span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
     <span class="nx">req</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">https://jsonplaceholder.typicode.com/users/1</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">req</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
       <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
         <span class="nx">resolve</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">response</span><span class="p">);</span>
       <span class="p">}</span>
       <span class="k">else</span> <span class="p">{</span>
         <span class="nx">reject</span><span class="p">(</span><span class="nb">Error</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">statusText</span><span class="p">));</span>
       <span class="p">}</span>
     <span class="p">};</span>
     <span class="nx">req</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
       <span class="nx">reject</span><span class="p">(</span><span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Network Error</span><span class="dl">"</span><span class="p">));</span>
     <span class="p">};</span>
     <span class="nx">req</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
   <span class="p">});</span>
 <span class="p">}</span>
  <span class="kd">var</span> <span class="nx">resolvedAnswer</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="dl">'</span><span class="s1">--resolvedAnswer--</span><span class="dl">'</span><span class="p">)</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
 <span class="p">}</span>
 <span class="kd">var</span> <span class="nx">rejectedAnwer</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="dl">'</span><span class="s1">--rejectedAnwer--</span><span class="dl">'</span><span class="p">)</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
 <span class="p">}</span>
  <span class="nx">promiseCallback</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">resolvedAnswer</span><span class="p">,</span> <span class="nx">rejectedAnwer</span><span class="p">)</span>

</code></pre></div></div>
<p><strong>Resolved Answer</strong></p>
<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">"--resolvedAnswer--"
{
   'id': 1,
   'name': 'Leanne Graham',
   'username': 'Bret',
   'email': 'Sincere@april.biz',
   'address': {
     'street': 'Kulas Light',
     'suite': 'Apt. 556',
     'city': 'Gwenborough',
     'zipcode': '92998-3874',
     'geo': {
       'lat': '-37.3159',
       'lng': '81.1496'
     }
   },
   'phone': '1-770-736-8031 x56442',
   'website': 'hildegard.org',
   'company': {
     'name': 'Romaguera-Crona',
     'catchPhrase': 'Multi-layered client-server neural-net',
     'bs': 'harness real-time e-markets'
   }
 }

</span></code></pre></div></div>

<h3 id="fetch">Fetch</h3>
<p>La siguiente implementación son promesas con API Fetch que es una API para recuperar recursos, es muy similar a la anterior.
Lo que podemos decir de fetch es que tiene una particularidad de que todas las respuestas las responde de forma correcta lo que significa que todas caerán dentro del then y es ahí donde tenemos que evaluar el status para resolver la petición o rechazarla.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">promiseCallback</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
     
   <span class="nx">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://jsonplaceholder.typicode.com/users/1</span><span class="dl">'</span><span class="p">)</span>
   <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
     <span class="k">if</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="o">==</span><span class="mi">200</span><span class="p">){</span>
       <span class="nx">resolve</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
     <span class="p">}</span><span class="k">else</span><span class="p">{</span>
       <span class="nx">reject</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
     <span class="p">}</span>
   <span class="p">})</span>
   <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">)</span>
   <span class="p">});</span>
 <span class="p">}</span>
  <span class="kd">var</span> <span class="nx">resolvedAnswer</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="dl">'</span><span class="s1">--resolvedAnswer--</span><span class="dl">'</span><span class="p">)</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="dl">'</span><span class="s1">-&gt;</span><span class="dl">'</span><span class="p">,</span><span class="nx">data</span><span class="p">)</span>
 <span class="p">}</span>
 <span class="kd">var</span> <span class="nx">rejectedAnwer</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="dl">'</span><span class="s1">--rejectedAnwer--</span><span class="dl">'</span><span class="p">)</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="dl">'</span><span class="s1">--&gt;</span><span class="dl">'</span><span class="p">,</span><span class="nx">data</span><span class="p">)</span>
 <span class="p">}</span>
  <span class="nx">promiseCallback</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">resolvedAnswer</span><span class="p">,</span> <span class="nx">rejectedAnwer</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="async-await">Async Await</h3>
<p>Async Await apareció en el <strong>ES2017</strong>  y es una nueva definición para implementar promesas, lo que hace es definir un método de tipo <strong>async</strong> de la forma <code class="highlighter-rouge"><span class="k">async</span> <span class="k">function</span> <span class="nf">getData</span><span class="p">()</span> <span class="p">{}</span></code> este utiliza el await para hacer esperar a la función hasta que esta responda; de forma de una promesa resuelta y sólo si entra dentro de la estructura catch devolverá una promesa rechazada.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">asyncAwaitCallback</span><span class="p">()</span> <span class="p">{</span>
   <span class="k">try</span> <span class="p">{</span>
     <span class="kd">const</span> <span class="nx">response1</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://jsonplaceholder.typicode.com/users/1</span><span class="dl">'</span><span class="p">);</span>
     <span class="k">return</span> <span class="k">await</span> <span class="nx">response1</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
   <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>     
     <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
   <span class="p">}</span>
 <span class="p">}</span>
 <span class="kd">var</span> <span class="nx">resolvedAnswer</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="dl">'</span><span class="s1">--resolvedAnswer--</span><span class="dl">'</span><span class="p">)</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="dl">'</span><span class="s1">-&gt;</span><span class="dl">'</span><span class="p">,</span><span class="nx">data</span><span class="p">)</span>
 <span class="p">}</span>
 <span class="kd">var</span> <span class="nx">rejectedAnwer</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="dl">'</span><span class="s1">--rejectedAnwer--</span><span class="dl">'</span><span class="p">)</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="dl">'</span><span class="s1">--&gt;</span><span class="dl">'</span><span class="p">,</span><span class="nx">data</span><span class="p">)</span>
 <span class="p">}</span>

<span class="nx">asyncAwaitCallback</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">resolvedAnswer</span><span class="p">)</span> <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">rejectedAnwer</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="eventos">Eventos</h2>
<p>Los eventos son interacciones de un usuario dentro del DOM(Document Object Model) como desarrollador usamos los eventos para generar tareas como por ejemplo cambiar el color de un botón cuando es presionado.
Existen tres modos de generar eventos
Evento dentro de las etiquetas HTML
En este ejemplo se asocia el evento onclick a un botón para que despliegue un mensaje de alerta a ser presionado.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onclick</span><span class="o">=</span><span class="dl">"</span><span class="s2">alert('Hello world!')</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span></code></pre></div></div>

<h3 id="evento-como-propiedad-de-un-elemento-dom">Evento como propiedad de un elemento DOM</h3>
<p>En este caso se referenci el objeto DOM y a la propiedad onclick se le asocia una función anónimo.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myButton</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="dl">'</span><span class="s1">button </span><span class="dl">'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
<span class="nx">myButton</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span><span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello world</span><span class="dl">'</span><span class="p">);};</span>
</code></pre></div></div>

<h3 id="evento-con-eventtargetaddeventlistener">Evento con EventTarget.addEventListener</h3>
<p>Esta forma es la más utilizada en la actualidad, y lo que hace es registrar un evento específico y asociarse un método.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myButton</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="dl">'</span><span class="s1">button </span><span class="dl">'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
<span class="nx">myButton</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">onclick</span><span class="dl">'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span><span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello world</span><span class="dl">'</span><span class="p">)});</span>
</code></pre></div></div>

:ET